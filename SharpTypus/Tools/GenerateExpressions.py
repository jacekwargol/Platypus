import sys
import os
scriptName = os.path.basename(sys.argv[0])


def upcaseString(string):
	return string[0].upper() + string[1:]


def generateExpressions(path, directory, imports, baseClass, visitorName, exprs):
    for name, types in exprs.items():
        generateExpression(path, directory, imports, name, baseClass, visitorName, types)
    generateVisitorInterface(path, directory, visitorName, exprs)

def generateExpression(path, directory, imports, name, baseName, visitorName, types):
    fileName = name + ".cs"
    file = open(path + directory + "\\" + fileName,"w")
    file.write(f"// Class generated by {scriptName} script\n")
    file.write("\n")
    file.write(imports)
    file.write("\n")
    file.write(f"namespace SharpTypus.{directory} {{\n")
    file.write(f"class {name} : {baseName} {{\n")

    # Declare fields
    for typeName, type in types.items(): 
        file.write(f"public {type} {upcaseString(typeName)} {{ get; }}\n")

    file.write("\n")

    # Constructor
    constructorSignature = f"public {name}("
    for typeName, type in types.items():
        constructorSignature += f"{type} {typeName}, "
    # remove trailing comma
    if(constructorSignature.endswith(", ")):
        constructorSignature = constructorSignature[:-2]
    constructorSignature += ")"
    file.write(f"{constructorSignature} {{\n")
    for typeName in types.keys():
        file.write(f"{upcaseString(typeName)} = {typeName};\n")
    file.write("}\n")

    file.write("\n")

    # Base class methods implementation
    file.write(f"public override T Accept<T>({visitorName}<T> visitor) => ")
    file.write("visitor.Visit(this);")

    file.write("\n")
    
    # Overload equality operators
    file.write(f"public override bool Equals(object obj) {{\n")
    file.write(f"if(!(obj is {name})) return false;\n")
    eqString = ""
    for typeName, type in types.items():
        eqString += (f"(({name})obj).{upcaseString(typeName)} == this.{upcaseString(typeName)} && ")
    eqString = eqString[:-4] + ";"
    file.write("return " + eqString + "\n")
    file.write("}\n")
    file.write(f"public override int GetHashCode() => ")
    tupleString = "("
    for typeName, type in types.items():
        tupleString += f"{upcaseString(typeName)}, "
    tupleString = tupleString[:-2] + ")"
    file.write(f"{tupleString}.GetHashCode();")
    file.write("\n")
    file.write("}\n")
    file.write("}\n")
    file.close()


def generateVisitorInterface(path, directory, name, exprs):
    fileName = name + ".cs"
    file = open(path + directory + "\\" + fileName,"w")

    file.write(f"// Class generated by {scriptName} script\n")
    file.write("\n")
    file.write(f"namespace SharpTypus.{directory} {{\n")
    file.write(f"interface {name}<T> {{\n")

    # Methods
    for expr in exprs.keys():
        file.write(f"T Visit({expr} expr);\n")

    file.write("}\n")
    file.write("}\n")
    file.close()

path = "E:\\Programowanie\\C#\\Platypus\\SharpTypus\\"
exprImports = "using SharpTypus.Parsing;"
statementsImports = "using SharpTypus.Parsing;\nusing SharpTypus.Expressions;"

generateExpressions(path, "Expressions", exprImports, "Expr", "IExprVisitor",
    {
        "Binary": {"leftExpr": "Expr", "rightExpr": "Expr", "operator_": "Token" },
        "Unary": {"expr": "Expr", "operator_": "Token"},
		"Literal": {"token": "Token"},
		"Grouping": {"expr": "Expr"},
		"Variable": {"name": "Token"},
	}
)


generateExpressions(path, "Statements", statementsImports,
     "Statement", "IStatementVisitor",
	{
		"ExprStatement": {"expr": "Expr"},
		"LetStatement": {"name": "Token", "initializer": "Expr"},
	}	
)