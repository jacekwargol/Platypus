import sys
import os
scriptName = os.path.basename(sys.argv[0])
namespaceString = "namespace SharpTypus.Parsing.Expressions {\n"


def upcaseString(string):
	return string[0].upper() + string[1:]


def generateExpressions(path, baseClass, visitorName, exprs):
    for name, types in exprs.items():
        generateExpression(path, name, baseClass, types)
    generateExprVisitorInterface(path, visitorName, exprs)


def generateExpression(path, name, baseName, types):
    fileName = name + ".cs"
    file = open(path + fileName,"w")
    file.write(f"// Class generated by {scriptName} script\n")
    file.write("\n")
    file.write(namespaceString)
    file.write(f"class {name} : {baseName} {{\n")

    # Declare fields
    for typeName, type in types.items(): 
        file.write(f"public {type} {upcaseString(typeName)} {{ get; }}\n")

    file.write("\n")

    # Constructor
    constructorSignature = f"public {name}("
    for typeName, type in types.items():
        constructorSignature += f"{type} {typeName}, "
    # remove trailing comma
    if(constructorSignature.endswith(", ")):
        constructorSignature = constructorSignature[:-2]
    constructorSignature += ")"
    file.write(f"{constructorSignature} {{\n")
    for typeName in types.keys():
        file.write(f"{upcaseString(typeName)} = {typeName};\n")
    file.write("}\n")

    file.write("\n")

    # Base class methods implementation
    file.write("public override T Accept<T>(IExprVisitor<T> visitor) => ")
    file.write("visitor.Visit(this);")

    file.write("}\n")
    file.write("}\n")
    file.close()


def generateExprVisitorInterface(path, name, exprs):
    fileName = name + ".cs"
    file = open(path + fileName,"w")

    file.write(f"// Class generated by {scriptName} script\n")
    file.write("\n")
    file.write(namespaceString)
    file.write(f"interface {name}<T> {{\n")

    # Methods
    for expr in exprs.keys():
        file.write(f"T Visit({expr} expr);\n")

    file.write("}\n")
    file.write("}\n")
    file.close()


generateExpressions("E:\\Programowanie\\C#\\Platypus\\SharpTypus\\Parsing\\Expressions\\",
    "Expr", "IExprVisitor",
    {
        "Binary": {"leftExpr": "Expr", "rightExpr": "Expr", "operator_": "Token" },
        "Unary": {"expr": "Expr", "operator_": "Token"},
		"Literal": {"token": "Token"},
		"Grouping": {"epxr": "Expr"}, 
	}
)